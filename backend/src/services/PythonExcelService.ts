import { spawn } from 'child_process';
import { promises as fs } from 'fs';
import path from 'path';
import os from 'os';

interface PythonProcessingResult {
  success: boolean;
  data: any[];
  total_rows_excel: number;
  valid_rows: number;
  rejected_rows: number;
  processing_time_seconds: number;
  summary: {
    total_rows: number;
    valid_rows: number;
    rejected_rows: number;
    rejected_by_missing_fields: number;
    rejected_by_invalid_status: number;
    rejected_by_invalid_date: number;
    rejected_by_year_range: number;
    status_distribution: Record<string, number>;
    year_distribution: Record<string, number>;
    mathematically_correct: boolean;
    processing_errors: string[];
  };
  errors: string[];
  warnings: string[];
}

class PythonExcelService {
  private pythonScriptPath: string;
  private tempDir: string;

  constructor() {
    // CAMINHO ABSOLUTO HARDCODED - USANDO BARRAS NORMAIS PARA EVITAR ESCAPING
    this.pythonScriptPath = 'S:/comp-glgarantias/r-glgarantias/backend/python/excel_processor.py';
    this.tempDir = os.tmpdir();
    console.log('üêç Caminho do script Python:', this.pythonScriptPath);
    console.log('üêç Diret√≥rio do service:', __dirname);
    console.log('üêç Diret√≥rio atual:', process.cwd());
  }

  /**
   * PROCESSAMENTO DEFINITIVO DE EXCEL COM PYTHON
   * 
   * Este m√©todo substitui completamente o CleanDataProcessor.ts
   * e garante leitura 100% correta dos dados Excel.
   */
  async processExcelBuffer(buffer: Buffer, filename: string): Promise<PythonProcessingResult> {
    console.log('üêç Iniciando processamento definitivo com Python pandas...');
    const startTime = Date.now();

    try {
      // 1. SALVAR BUFFER EM ARQUIVO TEMPOR√ÅRIO
      const tempFilePath = await this.saveBufferToTempFile(buffer, filename);
      console.log(`üìÅ Arquivo tempor√°rio criado: ${tempFilePath}`);

      // 2. EXECUTAR SCRIPT PYTHON
      const result = await this.executePythonProcessor(tempFilePath);

      // 3. LIMPAR ARQUIVO TEMPOR√ÅRIO
      await this.cleanupTempFile(tempFilePath);

      // 4. VALIDAR RESULTADO
      if (!result.success) {
        throw new Error(`Processamento Python falhou: ${result.errors.join(', ')}`);
      }

      console.log('‚úÖ Processamento Python conclu√≠do com sucesso:');
      console.log(`   üìä Total Excel: ${result.total_rows_excel}`);
      console.log(`   ‚úÖ V√°lidos: ${result.valid_rows}`);
      console.log(`   ‚ùå Rejeitados: ${result.rejected_rows}`);
      console.log(`   ‚è±Ô∏è Tempo: ${result.processing_time_seconds.toFixed(2)}s`);
      console.log(`   üßÆ Matem√°tica correta: ${result.summary.mathematically_correct ? '‚úÖ' : '‚ùå'}`);

      return result;

    } catch (error) {
      console.error('üí• Erro no processamento Python:', error);
      throw new Error(`Falha no processamento Python: ${(error as Error).message}`);
    }
  }

  /**
   * SALVAR BUFFER EM ARQUIVO TEMPOR√ÅRIO
   */
  private async saveBufferToTempFile(buffer: Buffer, originalFilename: string): Promise<string> {
    const timestamp = Date.now();
    const extension = path.extname(originalFilename) || '.xlsx';
    const tempFilename = `excel_${timestamp}${extension}`;
    const tempFilePath = path.join(this.tempDir, tempFilename);

    try {
      await fs.writeFile(tempFilePath, buffer);
      return tempFilePath;
    } catch (error) {
      throw new Error(`Falha ao criar arquivo tempor√°rio: ${(error as Error).message}`);
    }
  }

  /**
   * EXECUTAR SCRIPT PYTHON
   */
  private async executePythonProcessor(filePath: string): Promise<PythonProcessingResult> {
    return new Promise((resolve, reject) => {
      console.log(`üöÄ DEBUG: pythonScriptPath = "${this.pythonScriptPath}"`);
      console.log(`üöÄ DEBUG: filePath = "${filePath}"`);
      console.log(`üöÄ Executando: python ${this.pythonScriptPath} "${filePath}"`);

      const pythonProcess = spawn('python', [this.pythonScriptPath, filePath, '--summary-only'], {
        stdio: ['pipe', 'pipe', 'pipe'],
        shell: true
      });

      let stdout = '';
      let stderr = '';

      pythonProcess.stdout.on('data', (data) => {
        stdout += data.toString();
      });

      pythonProcess.stderr.on('data', (data) => {
        stderr += data.toString();
        console.log(`üêç Python log: ${data.toString().trim()}`);
      });

      pythonProcess.on('close', (code) => {
        console.log(`üîç DEBUG: Processo Python terminou com c√≥digo: ${code}`);
        console.log(`üîç DEBUG: Stdout length: ${stdout.length}`);
        console.log(`üîç DEBUG: Stderr: ${stderr}`);
        
        // Se temos stdout v√°lido, considerar sucesso mesmo com c√≥digo 1
        if (stdout.trim().length > 0 && stdout.includes('"success":true')) {
          console.log(`‚úÖ For√ßando sucesso: JSON v√°lido encontrado mesmo com c√≥digo ${code}`);
          code = 0; // For√ßar sucesso
        }
        
        if (code !== 0) {
          console.error(`‚ùå Processo Python terminou com c√≥digo: ${code}`);
          console.error(`‚ùå Stderr: ${stderr}`);
          reject(new Error(`Processo Python falhou (c√≥digo ${code}): ${stderr}`));
          return;
        }

        try {
          // Parsing do resultado JSON
          const result = JSON.parse(stdout) as PythonProcessingResult;
          resolve(result);
        } catch (parseError) {
          console.error('‚ùå Erro ao fazer parse do resultado Python:', parseError);
          console.error('‚ùå Stdout recebido:', stdout);
          reject(new Error(`Erro ao fazer parse do resultado: ${(parseError as Error).message}`));
        }
      });

      pythonProcess.on('error', (error) => {
        console.error('‚ùå Erro ao executar processo Python:', error);
        reject(new Error(`Erro ao executar Python: ${error.message}`));
      });

      // Timeout de seguran√ßa (10 minutos)
      setTimeout(() => {
        pythonProcess.kill();
        reject(new Error('Timeout: Processamento Python demorou mais de 10 minutos'));
      }, 10 * 60 * 1000);
    });
  }

  /**
   * LIMPAR ARQUIVO TEMPOR√ÅRIO
   */
  private async cleanupTempFile(filePath: string): Promise<void> {
    try {
      await fs.unlink(filePath);
      console.log(`üßπ Arquivo tempor√°rio removido: ${filePath}`);
    } catch (error) {
      console.warn(`‚ö†Ô∏è Falha ao remover arquivo tempor√°rio: ${(error as Error).message}`);
      // N√£o √© cr√≠tico, apenas log de warning
    }
  }

  /**
   * VALIDAR SE PYTHON EST√Å DISPON√çVEL
   */
  async validatePythonEnvironment(): Promise<{ valid: boolean; error?: string }> {
    return new Promise((resolve) => {
      const pythonProcess = spawn('python', ['--version'], { stdio: 'pipe' });

      pythonProcess.on('close', (code) => {
        if (code === 0) {
          resolve({ valid: true });
        } else {
          resolve({ 
            valid: false, 
            error: 'Python n√£o encontrado. Certifique-se de que Python 3.x est√° instalado e no PATH.' 
          });
        }
      });

      pythonProcess.on('error', () => {
        resolve({ 
          valid: false, 
          error: 'Python n√£o encontrado. Certifique-se de que Python 3.x est√° instalado e no PATH.' 
        });
      });
    });
  }

  /**
   * INSTALAR DEPEND√äNCIAS PYTHON
   */
  async installPythonDependencies(): Promise<{ success: boolean; error?: string }> {
    const requirementsPath = 'S:/comp-glgarantias/r-glgarantias/backend/python/requirements.txt';

    return new Promise((resolve) => {
      console.log('üì¶ Instalando depend√™ncias Python...');
      
      const pipProcess = spawn('pip', ['install', '-r', requirementsPath], {
        stdio: ['pipe', 'pipe', 'pipe'],
        shell: true
      });

      let stderr = '';

      pipProcess.stderr.on('data', (data) => {
        stderr += data.toString();
        console.log(`üì¶ Pip: ${data.toString().trim()}`);
      });

      pipProcess.on('close', (code) => {
        if (code === 0) {
          console.log('‚úÖ Depend√™ncias Python instaladas com sucesso');
          resolve({ success: true });
        } else {
          console.error(`‚ùå Falha na instala√ß√£o das depend√™ncias: ${stderr}`);
          resolve({ 
            success: false, 
            error: `Falha na instala√ß√£o: ${stderr}` 
          });
        }
      });

      pipProcess.on('error', (error) => {
        console.error('‚ùå Erro ao executar pip:', error);
        resolve({ 
          success: false, 
          error: `Erro ao executar pip: ${error.message}` 
        });
      });
    });
  }
}

export { PythonExcelService, PythonProcessingResult };