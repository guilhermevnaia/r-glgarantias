import { Request, Response } from 'express';
import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env.SUPABASE_URL!;
const supabaseKey = process.env.SUPABASE_ANON_KEY!;
const supabase = createClient(supabaseUrl, supabaseKey);

export class SettingsController {
  
  // === M√âTODOS DE MEC√ÇNICOS ===
  
  async getMechanics(req: Request, res: Response) {
    try {
      console.log('üë®‚Äçüîß Buscando todos os mec√¢nicos...');

      // Buscar mec√¢nicos √∫nicos diretamente dos service_orders
      const { data: orders, error: ordersError } = await supabase
        .from('service_orders')
        .select('responsible_mechanic')
        .not('responsible_mechanic', 'is', null);

      if (ordersError) {
        console.error('‚ùå Erro ao buscar ordens:', ordersError);
        return res.status(500).json({ error: 'Erro ao buscar mec√¢nicos' });
      }

      // Extrair mec√¢nicos √∫nicos
      const uniqueMechanics = [...new Set(orders?.map(o => o.responsible_mechanic).filter(Boolean))];
      
      const mechanics = uniqueMechanics.map((name, index) => ({
        id: index + 1,
        name,
        email: null,
        active: true,
        totalOrders: orders?.filter(o => o.responsible_mechanic === name).length || 0,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }));

      console.log(`‚úÖ Encontrados ${mechanics.length} mec√¢nicos √∫nicos`);
      console.log(`‚úÖ Retornando ${mechanics?.length || 0} mec√¢nicos`);
      
      res.json({
        success: true,
        data: mechanics || []
      });

    } catch (error) {
      console.error('‚ùå Erro interno ao buscar mec√¢nicos:', error);
      res.status(500).json({ error: 'Erro interno do servidor' });
    }
  }

  async addMechanic(req: Request, res: Response) {
    try {
      const { name, email } = req.body;

      console.log('‚ûï Adicionando mec√¢nico:', { name, email });

      // Validar dados obrigat√≥rios
      if (!name || !name.trim()) {
        return res.status(400).json({ error: 'Nome do mec√¢nico √© obrigat√≥rio' });
      }

      // Verificar se o mec√¢nico j√° existe
      const { data: existing } = await supabase
        .from('system_mechanics')
        .select('id')
        .ilike('name', name.trim())
        .single();

      if (existing) {
        return res.status(400).json({ error: 'Mec√¢nico com este nome j√° existe' });
      }

      // Criar mec√¢nico
      const mechanicData = {
        name: name.trim(),
        email: email?.trim() || null,
        active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };

      const { data: newMechanic, error } = await supabase
        .from('system_mechanics')
        .insert([mechanicData])
        .select()
        .single();

      if (error) {
        console.error('‚ùå Erro ao criar mec√¢nico:', error);
        return res.status(500).json({ error: 'Erro ao criar mec√¢nico' });
      }

      // Calcular total de ordens
      const { count } = await supabase
        .from('service_orders')
        .select('*', { count: 'exact', head: true })
        .eq('responsible_mechanic', newMechanic.name);

      newMechanic.totalOrders = count || 0;

      console.log('‚úÖ Mec√¢nico criado:', newMechanic);
      res.status(201).json({
        success: true,
        message: 'Mec√¢nico adicionado com sucesso',
        data: newMechanic
      });

    } catch (error) {
      console.error('‚ùå Erro interno ao adicionar mec√¢nico:', error);
      res.status(500).json({ error: 'Erro interno do servidor' });
    }
  }

  async updateMechanic(req: Request, res: Response) {
    try {
      const { id } = req.params;
      const updateData = req.body;

      console.log(`üîÑ Atualizando mec√¢nico ID: ${id}`, updateData);

      // Validar ID
      if (!id) {
        return res.status(400).json({ error: 'ID do mec√¢nico √© obrigat√≥rio' });
      }

      // Processar dados de atualiza√ß√£o
      const processedData: any = {};
      
      if (updateData.name !== undefined) {
        if (!updateData.name.trim()) {
          return res.status(400).json({ error: 'Nome n√£o pode estar vazio' });
        }
        processedData.name = updateData.name.trim();
      }

      if (updateData.email !== undefined) {
        processedData.email = updateData.email?.trim() || null;
      }

      if (updateData.active !== undefined) {
        processedData.active = Boolean(updateData.active);
      }

      processedData.updated_at = new Date().toISOString();

      // Verificar se o mec√¢nico existe
      const { data: existingMechanic, error: fetchError } = await supabase
        .from('system_mechanics')
        .select('*')
        .eq('id', id)
        .single();

      if (fetchError || !existingMechanic) {
        return res.status(404).json({ error: 'Mec√¢nico n√£o encontrado' });
      }

      // Atualizar mec√¢nico
      const { data: updatedMechanic, error } = await supabase
        .from('system_mechanics')
        .update(processedData)
        .eq('id', id)
        .select()
        .single();

      if (error) {
        console.error('‚ùå Erro ao atualizar mec√¢nico:', error);
        return res.status(500).json({ error: 'Erro ao atualizar mec√¢nico' });
      }

      // Calcular total de ordens
      const { count } = await supabase
        .from('service_orders')
        .select('*', { count: 'exact', head: true })
        .eq('responsible_mechanic', updatedMechanic.name);

      updatedMechanic.totalOrders = count || 0;

      console.log('‚úÖ Mec√¢nico atualizado:', updatedMechanic);
      res.json({
        success: true,
        message: 'Mec√¢nico atualizado com sucesso',
        data: updatedMechanic
      });

    } catch (error) {
      console.error('‚ùå Erro interno ao atualizar mec√¢nico:', error);
      res.status(500).json({ error: 'Erro interno do servidor' });
    }
  }

  async removeMechanic(req: Request, res: Response) {
    try {
      const { id } = req.params;

      console.log(`üóëÔ∏è Removendo mec√¢nico ID: ${id}`);

      // Validar ID
      if (!id) {
        return res.status(400).json({ error: 'ID do mec√¢nico √© obrigat√≥rio' });
      }

      // Verificar se o mec√¢nico existe
      const { data: existingMechanic, error: fetchError } = await supabase
        .from('system_mechanics')
        .select('name')
        .eq('id', id)
        .single();

      if (fetchError || !existingMechanic) {
        return res.status(404).json({ error: 'Mec√¢nico n√£o encontrado' });
      }

      // Verificar se h√° ordens de servi√ßo associadas
      const { count } = await supabase
        .from('service_orders')
        .select('*', { count: 'exact', head: true })
        .eq('responsible_mechanic', existingMechanic.name);

      if (count && count > 0) {
        return res.status(400).json({ 
          error: `N√£o √© poss√≠vel remover o mec√¢nico. Existem ${count} ordens de servi√ßo associadas.` 
        });
      }

      // Remover mec√¢nico
      const { error } = await supabase
        .from('system_mechanics')
        .delete()
        .eq('id', id);

      if (error) {
        console.error('‚ùå Erro ao remover mec√¢nico:', error);
        return res.status(500).json({ error: 'Erro ao remover mec√¢nico' });
      }

      console.log('‚úÖ Mec√¢nico removido com sucesso');
      res.json({
        success: true,
        message: 'Mec√¢nico removido com sucesso'
      });

    } catch (error) {
      console.error('‚ùå Erro interno ao remover mec√¢nico:', error);
      res.status(500).json({ error: 'Erro interno do servidor' });
    }
  }

  // === M√âTODOS DE USU√ÅRIOS ===

  async getUsers(req: Request, res: Response) {
    try {
      console.log('üë• Buscando todos os usu√°rios...');

      const { data: users, error } = await supabase
        .from('system_users')
        .select('*')
        .order('name');

      if (error && error.code === 'PGRST116') {
        // Tabela n√£o existe, retornar dados mock
        console.log('üìã Tabela system_users n√£o existe, retornando dados mock...');
        
        const mockUsers = [
          {
            id: 1,
            name: 'Admin Master',
            email: 'admin@company.com',
            role: 'admin',
            active: true,
            created_at: '2024-01-01T00:00:00Z',
            updated_at: '2024-01-01T00:00:00Z'
          }
        ];

        return res.json({
          success: true,
          data: mockUsers
        });
      } else if (error) {
        console.error('‚ùå Erro ao buscar usu√°rios:', error);
        return res.status(500).json({ error: 'Erro ao buscar usu√°rios' });
      }

      console.log(`‚úÖ Retornando ${users?.length || 0} usu√°rios`);
      res.json({
        success: true,
        data: users || []
      });

    } catch (error) {
      console.error('‚ùå Erro interno ao buscar usu√°rios:', error);
      res.status(500).json({ error: 'Erro interno do servidor' });
    }
  }

  async addUser(req: Request, res: Response) {
    try {
      const { name, email, role } = req.body;

      console.log('‚ûï Adicionando usu√°rio:', { name, email, role });

      // Validar dados obrigat√≥rios
      if (!name || !name.trim()) {
        return res.status(400).json({ error: 'Nome do usu√°rio √© obrigat√≥rio' });
      }

      if (!email || !email.trim()) {
        return res.status(400).json({ error: 'Email do usu√°rio √© obrigat√≥rio' });
      }

      if (!role || !['admin', 'user'].includes(role)) {
        return res.status(400).json({ error: 'Fun√ß√£o deve ser admin ou user' });
      }

      // Verificar se o email j√° existe
      const { data: existing } = await supabase
        .from('system_users')
        .select('id')
        .ilike('email', email.trim())
        .single();

      if (existing) {
        return res.status(400).json({ error: 'Usu√°rio com este email j√° existe' });
      }

      // Criar usu√°rio
      const userData = {
        name: name.trim(),
        email: email.trim().toLowerCase(),
        role: role,
        active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };

      const { data: newUser, error } = await supabase
        .from('system_users')
        .insert([userData])
        .select()
        .single();

      if (error) {
        console.error('‚ùå Erro ao criar usu√°rio:', error);
        return res.status(500).json({ error: 'Erro ao criar usu√°rio' });
      }

      console.log('‚úÖ Usu√°rio criado:', newUser);
      res.status(201).json({
        success: true,
        message: 'Usu√°rio adicionado com sucesso',
        data: newUser
      });

    } catch (error) {
      console.error('‚ùå Erro interno ao adicionar usu√°rio:', error);
      res.status(500).json({ error: 'Erro interno do servidor' });
    }
  }

  async updateUser(req: Request, res: Response) {
    try {
      const { id } = req.params;
      const updateData = req.body;

      console.log(`üîÑ Atualizando usu√°rio ID: ${id}`, updateData);

      // Validar ID
      if (!id) {
        return res.status(400).json({ error: 'ID do usu√°rio √© obrigat√≥rio' });
      }

      // Processar dados de atualiza√ß√£o
      const processedData: any = {};
      
      if (updateData.name !== undefined) {
        if (!updateData.name.trim()) {
          return res.status(400).json({ error: 'Nome n√£o pode estar vazio' });
        }
        processedData.name = updateData.name.trim();
      }

      if (updateData.email !== undefined) {
        if (!updateData.email.trim()) {
          return res.status(400).json({ error: 'Email n√£o pode estar vazio' });
        }
        processedData.email = updateData.email.trim().toLowerCase();
      }

      if (updateData.role !== undefined) {
        if (!['admin', 'user'].includes(updateData.role)) {
          return res.status(400).json({ error: 'Fun√ß√£o deve ser admin ou user' });
        }
        processedData.role = updateData.role;
      }

      if (updateData.active !== undefined) {
        processedData.active = Boolean(updateData.active);
      }

      processedData.updated_at = new Date().toISOString();

      // Verificar se o usu√°rio existe
      const { data: existingUser, error: fetchError } = await supabase
        .from('system_users')
        .select('*')
        .eq('id', id)
        .single();

      if (fetchError || !existingUser) {
        return res.status(404).json({ error: 'Usu√°rio n√£o encontrado' });
      }

      // Atualizar usu√°rio
      const { data: updatedUser, error } = await supabase
        .from('system_users')
        .update(processedData)
        .eq('id', id)
        .select()
        .single();

      if (error) {
        console.error('‚ùå Erro ao atualizar usu√°rio:', error);
        return res.status(500).json({ error: 'Erro ao atualizar usu√°rio' });
      }

      console.log('‚úÖ Usu√°rio atualizado:', updatedUser);
      res.json({
        success: true,
        message: 'Usu√°rio atualizado com sucesso',
        data: updatedUser
      });

    } catch (error) {
      console.error('‚ùå Erro interno ao atualizar usu√°rio:', error);
      res.status(500).json({ error: 'Erro interno do servidor' });
    }
  }

  async removeUser(req: Request, res: Response) {
    try {
      const { id } = req.params;

      console.log(`üóëÔ∏è Removendo usu√°rio ID: ${id}`);

      // Validar ID
      if (!id) {
        return res.status(400).json({ error: 'ID do usu√°rio √© obrigat√≥rio' });
      }

      // Verificar se o usu√°rio existe
      const { data: existingUser, error: fetchError } = await supabase
        .from('system_users')
        .select('*')
        .eq('id', id)
        .single();

      if (fetchError || !existingUser) {
        return res.status(404).json({ error: 'Usu√°rio n√£o encontrado' });
      }

      // N√£o permitir remover o √∫ltimo admin
      if (existingUser.role === 'admin') {
        const { count } = await supabase
          .from('system_users')
          .select('*', { count: 'exact', head: true })
          .eq('role', 'admin')
          .eq('active', true);

        if (count && count <= 1) {
          return res.status(400).json({ 
            error: 'N√£o √© poss√≠vel remover o √∫ltimo administrador ativo do sistema' 
          });
        }
      }

      // Remover usu√°rio
      const { error } = await supabase
        .from('system_users')
        .delete()
        .eq('id', id);

      if (error) {
        console.error('‚ùå Erro ao remover usu√°rio:', error);
        return res.status(500).json({ error: 'Erro ao remover usu√°rio' });
      }

      console.log('‚úÖ Usu√°rio removido com sucesso');
      res.json({
        success: true,
        message: 'Usu√°rio removido com sucesso'
      });

    } catch (error) {
      console.error('‚ùå Erro interno ao remover usu√°rio:', error);
      res.status(500).json({ error: 'Erro interno do servidor' });
    }
  }
}