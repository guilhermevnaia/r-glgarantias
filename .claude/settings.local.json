{
  "permissions": {
    "allow": [
      "Bash(npm run build:*)",
      "Bash(npm run dev:*)",
      "Bash(npx ts-node:*)",
      "Bash(npm install)",
      "Bash(node:*)",
      "Bash(npm start)",
      "Bash(npx tsc:*)",
      "Bash(curl:*)",
      "Bash(tasklist:*)",
      "Bash(taskkill:*)",
      "Bash(net stop:*)",
      "WebFetch(domain:njdmpdpglpidamparwtr.supabase.co)",
      "Bash(git add:*)",
      "Bash(git push:*)",
      "Bash(npm install:*)",
      "Bash(rm:*)",
      "Bash(mkdir:*)",
      "Bash(ls:*)",
      "Bash(python:*)",
      "Bash(cd \"S:\\comp-glgarantias\\r-glgarantias\")",
      "Bash(ls -la)",
      "Bash(cd \"S:\\comp-glgarantias\\r-glgarantias\\backend\")",
      "Bash(node -e \"require(''dotenv'').config(); console.log(''SUPABASE_URL:'', process.env.SUPABASE_URL ? ''CONFIGURADO'' : ''NAO ENCONTRADO''); console.log(''SUPABASE_SERVICE_ROLE_KEY:'', process.env.SUPABASE_SERVICE_ROLE_KEY ? ''CONFIGURADO'' : ''NAO ENCONTRADO'');\")",
      "Bash(node -e \"const { createClient } = require(''@supabase/supabase-js''); require(''dotenv'').config(); const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY); supabase.from(''service_orders'').select(''count'', { count: ''exact'', head: true }).then(result => console.log(''Registros no banco:'', result.count || ''ERRO'', result.error ? result.error.message : ''OK'')).catch(err => console.log(''ERRO:'', err.message));\")",
      "Bash(timeout 10 npm start)",
      "Bash(curl -X POST -F \"file=@S:/comp-glgarantias/r-glgarantias/GLu-Garantias-TesteReal.xlsx\" http://localhost:3005/api/v1/upload --connect-timeout 5)",
      "Bash(cd \"S:\\comp-glgarantias\\r-glgarantias\\frontend\")",
      "Bash(npm install --legacy-peer-deps)",
      "Bash(timeout 10 npm run dev)",
      "Bash(node -e \"\nconst { createClient } = require(''@supabase/supabase-js'');\nrequire(''dotenv'').config();\nconst supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY);\n\nasync function analyzeData() {\n  // Total por status\n  const { data: statusCount } = await supabase\n    .from(''service_orders'')\n    .select(''order_status'')\n    .then(result => {\n      const counts = {};\n      result.data.forEach(row => {\n        counts[row.order_status] = (counts[row.order_status] || 0) + 1;\n      });\n      return { data: counts };\n    });\n  \n  console.log(''=== ANÁLISE ATUAL DO BANCO ==='');\n  console.log(''Status distribution:'', statusCount);\n  \n  // Total por ano\n  const { data: dates } = await supabase\n    .from(''service_orders'')\n    .select(''order_date'')\n    .order(''order_date'', { ascending: true });\n    \n  const yearCounts = {};\n  dates.forEach(row => {\n    const year = new Date(row.order_date).getFullYear();\n    yearCounts[year] = (yearCounts[year] || 0) + 1;\n  });\n  \n  console.log(''Year distribution:'', yearCounts);\n  console.log(''Date range:'', dates[0]?.order_date, ''to'', dates[dates.length-1]?.order_date);\n  console.log(''Total records:'', dates.length);\n}\nanalyzeData();\n\")",
      "Bash(node -e \"\nconst { createClient } = require(''@supabase/supabase-js'');\nrequire(''dotenv'').config();\nconst supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY);\n\nasync function getCorrectCount() {\n  const { data, count, error } = await supabase\n    .from(''service_orders'')\n    .select(''*'', { count: ''exact'' });\n  \n  console.log(''=== CONTAGEM CORRETA ==='');\n  console.log(''Total registros no banco:'', count);\n  console.log(''Erro:'', error);\n  \n  if (data && data.length > 0) {\n    console.log(''Primeiros 3 registros:'');\n    data.slice(0, 3).forEach((row, i) => {\n      console.log(`$i+1: OS $row.order_number - $row.order_date - Status: $row.order_status`);\n    });\n  }\n}\ngetCorrectCount();\n\")",
      "Bash(node -e \"\nconst { createClient } = require(''@supabase/supabase-js'');\nrequire(''dotenv'').config();\nconst supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY);\n\nasync function analyzeData() {\n  const { data, count } = await supabase\n    .from(''service_orders'')\n    .select(''order_number, order_date, order_status'', { count: ''exact'' });\n  \n  console.log(''=== ANÁLISE DETALHADA ==='');\n  console.log(''Total no banco:'', count);\n  \n  // Distribuição por status\n  const statusCount = {};\n  const yearCount = {};\n  \n  data.forEach(row => {\n    statusCount[row.order_status] = (statusCount[row.order_status] || 0) + 1;\n    const year = new Date(row.order_date).getFullYear();\n    yearCount[year] = (yearCount[year] || 0) + 1;\n  });\n  \n  console.log(''Por status:'', statusCount);\n  console.log(''Por ano:'', yearCount);\n}\nanalyzeData();\n\")",
      "Bash(node -e \"\nconst { createClient } = require(''@supabase/supabase-js'');\nrequire(''dotenv'').config();\nconst supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY);\n\nasync function checkValidationCriteria() {\n  console.log(''=== CRITÉRIOS DE VALIDAÇÃO APLICADOS ==='');\n  \n  // Registros com data < 2019\n  const { count: pre2019 } = await supabase\n    .from(''service_orders'')\n    .select(''*'', { count: ''exact'', head: true })\n    .lt(''order_date'', ''2019-01-01'');\n  \n  console.log(''Registros < 2019:'', pre2019);\n  \n  // Status inválidos\n  const { count: invalidStatus } = await supabase\n    .from(''service_orders'')\n    .select(''*'', { count: ''exact'', head: true })\n    .not(''order_status'', ''in'', ''(G,GO,GU)'');\n  \n  console.log(''Status inválidos (não G/GO/GU):'', invalidStatus);\n  \n  // Verificar datas mais recentes (podem ser problemáticas)\n  const { data: recentDates } = await supabase\n    .from(''service_orders'')\n    .select(''order_number, order_date, order_status'')\n    .gte(''order_date'', ''2022-01-01'')\n    .order(''order_date'', { ascending: false });\n  \n  console.log(''Registros >= 2022:'', recentDates.length);\n  console.log(''Mais recentes:'');\n  recentDates.slice(0, 5).forEach(row => {\n    console.log(\\`  OS ${row.order_number} - ${row.order_date} - ${row.order_status}\\`);\n  });\n}\ncheckValidationCriteria();\n\")",
      "Bash(node -e \"\nconst { createClient } = require(''@supabase/supabase-js'');\nrequire(''dotenv'').config();\nconst supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY);\n\nasync function checkValidationCriteria() {\n  console.log(''=== CRITÉRIOS DE VALIDAÇÃO APLICADOS ==='');\n  \n  // Registros com data < 2019\n  const { count: pre2019 } = await supabase\n    .from(''service_orders'')\n    .select(''*'', { count: ''exact'', head: true })\n    .lt(''order_date'', ''2019-01-01'');\n  \n  console.log(''Registros < 2019:'', pre2019);\n  \n  // Status inválidos\n  const { count: invalidStatus } = await supabase\n    .from(''service_orders'')\n    .select(''*'', { count: ''exact'', head: true })\n    .not(''order_status'', ''in'', ''(G,GO,GU)'');\n  \n  console.log(''Status inválidos (não G/GO/GU):'', invalidStatus);\n  \n  // Verificar datas mais recentes (podem ser problemáticas)\n  const { data: recentDates } = await supabase\n    .from(''service_orders'')\n    .select(''order_number, order_date, order_status'')\n    .gte(''order_date'', ''2022-01-01'')\n    .order(''order_date'', { ascending: false });\n  \n  console.log(''Registros >= 2022:'', recentDates.length);\n  console.log(''Mais recentes:'');\n  recentDates.slice(0, 5).forEach(row => {\n    console.log(''  OS'', row.order_number, ''-'', row.order_date, ''-'', row.order_status);\n  });\n}\ncheckValidationCriteria();\n\")",
      "Bash(node -e \"\nconst { createClient } = require(''@supabase/supabase-js'');\nrequire(''dotenv'').config();\nconst supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY);\n\nasync function detailedComparison() {\n  console.log(''=== ANÁLISE DETALHADA POR ANO ==='');\n  \n  const years = [2019, 2020, 2021, 2022, 2023, 2024, 2025];\n  let total = 0;\n  \n  for (const year of years) {\n    const { count } = await supabase\n      .from(''service_orders'')\n      .select(''*'', { count: ''exact'', head: true })\n      .gte(''order_date'', \\`${year}-01-01\\`)\n      .lt(''order_date'', \\`${year + 1}-01-01\\`);\n    \n    console.log(\\`${year}: ${count} registros\\`);\n    total += count;\n  }\n  \n  console.log(\\`TOTAL: ${total}\\`);\n  console.log(\\`DIFERENÇA: ${total - 2519} registros a mais que esperado\\`);\n}\ndetailedComparison();\n\")",
      "Bash(node analyze_discrepancy.js)",
      "Bash(node find_3_extra.js)",
      "Bash(node -e \"\nconst { createClient } = require(''@supabase/supabase-js'');\nrequire(''dotenv'').config();\nconst supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY);\n\nasync function checkTestRecords() {\n  console.log(''=== VERIFICANDO REGISTROS DE TESTE ==='');\n  \n  // Buscar registros com ''TESTE'' no nome\n  const { data: testRecords } = await supabase\n    .from(''service_orders'')\n    .select(''*'')\n    .ilike(''order_number'', ''%TESTE%'');\n  \n  console.log(''Registros de teste encontrados:'', testRecords.length);\n  \n  testRecords.forEach(record => {\n    console.log(\\`OS: ${record.order_number}, Data: ${record.order_date}, Status: ${record.order_status}, ID: ${record.id}\\`);\n  });\n  \n  // Calcular total sem registros de teste\n  const totalWithoutTests = 2522 - testRecords.length;\n  console.log(\\`Total sem testes: ${totalWithoutTests}\\`);\n  console.log(\\`Diferença para 2519: ${totalWithoutTests - 2519}\\`);\n}\ncheckTestRecords();\n\")",
      "Bash(node check_test_records.js)",
      "Bash(node -e \"\nconst { createClient } = require(''@supabase/supabase-js'');\nrequire(''dotenv'').config();\nconst supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY);\n\nasync function clearDatabase() {\n  console.log(''=== LIMPANDO BANCO DE DADOS ==='');\n  \n  // Contar registros antes\n  const { count: beforeCount } = await supabase\n    .from(''service_orders'')\n    .select(''*'', { count: ''exact'', head: true });\n  \n  console.log(''Registros antes da limpeza:'', beforeCount);\n  \n  // Limpar tabela service_orders\n  const { error: deleteError } = await supabase\n    .from(''service_orders'')\n    .delete()\n    .neq(''id'', 0); // Deleta todos\n  \n  if (deleteError) {\n    console.error(''Erro na limpeza:'', deleteError);\n    return;\n  }\n  \n  // Verificar limpeza\n  const { count: afterCount } = await supabase\n    .from(''service_orders'')\n    .select(''*'', { count: ''exact'', head: true });\n  \n  console.log(''Registros após limpeza:'', afterCount);\n  console.log(''Banco limpo com sucesso!'');\n}\n\nclearDatabase();\n\")",
      "Bash(curl -X POST -F \"file=@S:/comp-glgarantias/r-glgarantias/GLú-Garantias.xlsx\" http://localhost:3005/api/v1/upload --max-time 1200)",
      "Bash(pip install:*)",
      "Bash(powershell:*)"
    ],
    "deny": []
  }
}